{"version":3,"sources":["components/chart.js","components/card.js","components/country.js","App.js","serviceWorker.js","index.js","icons/bacteria.svg"],"names":["Chart","useState","dailyData","setdailyData","useEffect","fetch","then","res","json","output","collection","map","item","className","data","labels","reportDate","datasets","label","totalConfirmed","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","deaths","total","width","height","options","maintainAspectRatio","Card","style","number","time","start","end","duration","separator","Date","toDateString","Country","countries","setcountries","selectedCountry","setselectedCountry","suggestions","setsuggestions","country","setcountry","array","onSuggestionSelected","event","url","console","log","result","fetchACountry","suggestionValue","onSuggestionsFetchRequested","value","escapedValue","trim","replace","regex","RegExp","filter","test","name","getSuggestions","onSuggestionsClearRequested","getSuggestionValue","suggestion","renderSuggestion","inputProps","onChange","newValue","method","type","placeholder","marginTop","padding","Object","entries","length","confirmed","recovered","hoverBackgroundColor","App","lastUpdate","allAPI","setallAPI","catch","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.b11cc303.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Chart = () => {\r\n\r\n    const [dailyData, setdailyData] = useState([\r\n\r\n    ])\r\n\r\n    const fetchDailySummary = () => {\r\n        fetch('https://covid19.mathdro.id/api/daily')\r\n            .then(res => res.json())\r\n            .then(output => {\r\n                let collection = []\r\n                output.map((item) => {\r\n                    return collection = [...collection, item]\r\n                })\r\n                setdailyData(collection)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDailySummary()\r\n    }, [setdailyData])\r\n\r\n    return (\r\n        <div className='daily'>\r\n            <h2>Daily Summary</h2>\r\n            <Line\r\n                data={{\r\n                    labels: dailyData.map((item) => item.reportDate),\r\n                    datasets: [{\r\n                        label: 'Infected',\r\n                        data: dailyData.map((item) => item.totalConfirmed),\r\n                        fill: true,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'rgba(0, 128, 0,0.4)',\r\n                        borderColor: 'rgba(0, 128, 0,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'rgba(0, 128, 0,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(0, 128, 0,1)',\r\n                        pointHoverBorderColor: 'rgba(0, 128, 0,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                    }, {\r\n                        label: 'Deaths',\r\n                        data: dailyData.map((item) => item.deaths.total),\r\n                        fill: true,\r\n                        lineTension: 0.1,\r\n                        backgroundColor: 'rgba(255, 0, 0,0.4)',\r\n                        borderColor: 'rgba(255, 0, 0,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'rgba(255, 0, 0,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(255, 0, 0,1)',\r\n                        pointHoverBorderColor: 'rgba(255, 0, 0,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                    }]\r\n                }}\r\n                width={500}\r\n                height={300}\r\n                options={{ maintainAspectRatio: true }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport CountUp from 'react-countup';\r\n\r\nconst Card = ({ style, number, time }) => {\r\n    return (\r\n        <div className={style}>\r\n            <p>Confirmed Cases: <br />\r\n                <span>\r\n                    <CountUp\r\n                        start={0}\r\n                        end={number}\r\n                        duration={2.75}\r\n                        separator=\",\">\r\n                    </CountUp>\r\n                </span>\r\n            </p>\r\n            <p>Last Updated: <br /> {new Date(time).toDateString()}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React, { useEffect, useState } from 'react'\r\nimport Autosuggest from 'react-autosuggest';\r\nimport { Pie } from 'react-chartjs-2'\r\n\r\n\r\n\r\nconst Country = () => {\r\n    const [countries, setcountries] = useState([])\r\n    const [selectedCountry, setselectedCountry] = useState('')\r\n    const [suggestions, setsuggestions] = useState([])\r\n    const [country, setcountry] = useState({})\r\n\r\n    const url = 'https://covid19.mathdro.id/api/countries';\r\n    const fetchCountries = () => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(output => {\r\n                let array = [];\r\n                output.countries.map((item) => {\r\n                    return array = [...array, item]\r\n                })\r\n                setcountries(array)\r\n            })\r\n\r\n    }\r\n    const fetchACountry = (country) => {\r\n        const url = `https://covid19.mathdro.id/api/countries/${country}`\r\n        console.log(url)\r\n        fetch(url).then(res => res.json())\r\n            .then(result => {\r\n                setcountry(result)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCountries()\r\n    }, [setcountries])\r\n\r\n\r\n    // ---------------------------------------------\r\n\r\n    function escapeRegexCharacters(str) {\r\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n    }\r\n\r\n    function getSuggestions(value) {\r\n        const escapedValue = escapeRegexCharacters(value.trim());\r\n\r\n        if (escapedValue === '') {\r\n            return [];\r\n        }\r\n\r\n        const regex = new RegExp('^' + escapedValue, 'i');\r\n\r\n        return countries.filter(country => regex.test(country.name));\r\n    }\r\n\r\n    function getSuggestionValue(suggestion) {\r\n        return suggestion.name;\r\n    }\r\n\r\n    function renderSuggestion(suggestion) {\r\n        return (\r\n            <span>{suggestion.name}</span>\r\n        );\r\n    }\r\n\r\n    const onChange = (event, { newValue, method }) => {\r\n        setselectedCountry(newValue)\r\n    };\r\n\r\n    const onSuggestionsFetchRequested = ({ value }) => {\r\n        setsuggestions(getSuggestions(value))\r\n    };\r\n\r\n    const onSuggestionsClearRequested = () => {\r\n        setsuggestions([])\r\n    };\r\n\r\n    // --------------------------------------\r\n\r\n\r\n    return (\r\n        <div className='country'>\r\n            <h2>Summary by Country</h2>\r\n            <Autosuggest\r\n                suggestions={suggestions}\r\n                onSuggestionSelected={(event, { suggestionValue }) => {\r\n                    fetchACountry(suggestionValue)\r\n                }}\r\n                onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n                onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n                getSuggestionValue={getSuggestionValue}\r\n                renderSuggestion={renderSuggestion}\r\n                inputProps={{\r\n                    value: selectedCountry,\r\n                    onChange: onChange,\r\n                    type: \"search\",\r\n                    placeholder: \"Enter country\"\r\n                }} />\r\n            <div className='country-chart' style={{ marginTop: '.5rem', padding: '.5rem 0 1.5rem 0' }}>\r\n                {Object.entries(country).length === 0\r\n                    ? 'Please select a country'\r\n                    : <Pie data={{\r\n                        labels: ['Infected', 'Deaths', 'Recovered'],\r\n                        datasets: [{\r\n                            data: [country.confirmed.value, country.deaths.value, country.recovered.value],\r\n                            backgroundColor: [\r\n                                '#FF6384',\r\n                                '#FB2828',\r\n                                '#85DF77'\r\n                            ],\r\n                            hoverBackgroundColor: [\r\n                                '#FF6384',\r\n                                '#FB2828',\r\n                                '#85DF77'\r\n                            ]\r\n                        }]\r\n                    }\r\n                    }\r\n                        width={500}\r\n                        height={300} />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React, { useState, useEffect } from 'react';\nimport logo from './icons/bacteria.svg';\nimport './App.css';\n// import CountUp from 'react-countup';\nimport Chart from './components/chart'\nimport Card from './components/card'\nimport Country from './components/country'\n// import { fetchAPI } from './components/fetch'\n\nfunction App() {\n\n  // const [confirmed, setconfirmed] = useState('');\n  // const [deaths, setdeaths] = useState('');\n  // const [recovered, setrecovered] = useState('')\n\n  const [allAPI, setallAPI] = useState({\n    confirmed: 0,\n    deaths: 0,\n    recovered: 0,\n    lastUpdate: ''\n  })\n\n  const url = 'https://covid19.mathdro.id/api';\n  const fetchAPI = () => {\n    fetch(url).then(res => res.json())\n      .then(data => {\n        setallAPI({\n          confirmed: data.confirmed.value,\n          deaths: data.deaths.value,\n          recovered: data.recovered.value,\n          lastUpdate: data.lastUpdate\n        })\n      })\n      .catch(console.log)\n  }\n\n  useEffect(() => {\n    fetchAPI()\n\n  }, [setallAPI])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <section className='summary' >\n        <Card style={`card confirmed`} number={allAPI.confirmed} time={allAPI.lastUpdate} />\n        <Card style={`card deaths`} number={allAPI.deaths} time={allAPI.lastUpdate} />\n        <Card style={`card recovered`} number={allAPI.recovered} time={allAPI.lastUpdate} />\n      </section>\n      <section>\n        <Chart />\n      </section>\n      <section>\n        <Country />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bacteria.25fbfbf1.svg\";"],"sourceRoot":""}